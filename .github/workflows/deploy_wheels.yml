name: Build, test, upload (PyPI)

# Build on every branch push, tag push, and pull request change:
on:
  push:
    branches:
      - main
  pull_request:
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
# on:
#   push:
#   pull_request:
#   release:
#     types:
#       - published
  workflow_dispatch:

jobs:
  collect_targets:
    name: Collecting build targets
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-mjson.outputs.matrix }}
    steps:
    - uses: actions/checkout@v3
    - name: Generating json string
      id: gen-mjson
      run: |
        echo "{\"include\":[" > mjson_file
        for os in linux macos windows
        do
          github_os=$os
          [ "$os" == "linux" ] && github_os="ubuntu" 
          for bt in $(pipx run cibuildwheel --platform $os --print-build-identifiers)
          do
            echo "{\"os\": \"$github_os\", \"build\": \"$bt\"},"
          done
        done >> mjson_file
        echo "$mjson]}" >> mjson_file
        mjson=$(cat mjson_file | tr -d '\n' | sed 's/,]/]/')
        echo $mjson | jq .
        echo "matrix=$mjson" >> $GITHUB_OUTPUT
        
  build_wheels:
    needs: collect_targets
    name: Build ${{ matrix.build }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.collect_targets.outputs.matrix) }}

    steps:
      - name: Faking build wheels
        shell: bash --noprofile --norc {0} # No automatic fail-fast
        run: |
          echo "Building ${{ matrix.build }}"
          mkdir wheelhouse
          mkdir logs
          log=logs/${{ matrix.build }}.log
          echo "import random" > script.py
          echo "fail = (random.random() < .5)" >> script.py
          echo "if not fail:" >> script.py
          echo "  open('wheelhouse/${{ matrix.build }}.whl', 'w')" >> script.py
          echo "  print('Success')" >> script.py
          echo "else:" >> script.py
          echo "  msg=random.choice(['squares are round', 'err1', 'foo', 'bar'])" >> script.py
          echo "  print('Simulated error', msg)" >> script.py
          echo "  print('##[error]Process completed with exit code 1')" >> script.py
          echo "exit(fail)" >> script.py
          python3 script.py 2>&1 | tee $log
          res=${PIPESTATUS[0]}
          echo "[kgd-build-status] $res" >> $log
          exit $res
                    
      #- uses: actions/checkout@v3

      #- name: Build wheels
        #env:
          #CIBW_BUILD: ${{ matrix.build }}
          #CIBW_BUILD_VERBOSITY: 1
          #CIBW_TEST_EXTRAS: tests
          #CIBW_BEFORE_TEST: "pip install kaleido || echo 'No install candidates for kaleido'"
          #CIBW_BEFORE_TEST_LINUX: "yum install -y graphviz || apk add graphviz"
          #CIBW_BEFORE_TEST_MACOS: "brew install graphviz"
          #CIBW_BEFORE_TEST_WINDOWS: "choco install graphviz --no-progress"
          #CIBW_ENVIRONMENT_WINDOWS: "PYTHONUTF8=1"
          #CIBW_TEST_COMMAND: |
            #pytest {project}/tests -ra --small-scale --test-evolution
          #LC_ALL: C
        #shell: bash --noprofile --norc {0} # No automatic fail-fast
        #run: |
          #mkdir logs
          #log=logs/${{ matrix.build }}.log
          #pipx run cibuildwheel 2>&1 | tee $log
          #res=${PIPESTATUS[0]}
          #echo "[kgd-build-status] $res" >> $log
          #exit $res
          
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./wheelhouse/*.whl
      - uses: actions/upload-artifact@v3
        if: ${{ always() && !cancelled() }}
        with:
          name: logs
          path: ./logs/*.log

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: |
          mkdir logs
          pipx run build --sdist 2>&1 | tee logs/sdist.log
          exit ${PIPESTATUS[0]}

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/*.tar.gz
      - uses: actions/upload-artifact@v3
        if: ${{ always() && !cancelled() }}
        with:
          name: logs
          path: ./logs/*.log

  post_build:
    needs: [collect_targets, build_wheels, build_sdist]
    name: Post-build processing
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() }}
    steps:
      - uses: actions/download-artifact@v3
        name: download sdist/wheels
        with:
          name: dist
          path: dist
          
      - uses: actions/download-artifact@v3
        name: download logs
        with:
          name: logs
          path: logs
          
      - name: Generate summary
        env:
          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "Generating summary"
          
          mjson='${{ needs.collect_targets.outputs.matrix }}'
          builds=$(echo $mjson | jq -r '.include[].build')
          builds_n=$(wc -l <<< $builds)
          found=$(ls dist/*.whl | wc -l)
          echo "Built $found / $builds_n"
          rate=$(echo "$found $builds_n" | awk '{printf "%.0f", 100*$1/$2}')
          
          mkdir saucisson
          wiki_summary=saucisson/wheels.md
          matrix_summary=saucisson/matrix.md
                    
          built_table=built.md
          errs_table=errors.md
          matrix_log=matrix_log
          errs_log=err_log
          wurl=https://github.com/kgd-al/abrain/wiki/wheels/#

          (
            for build in $builds
            do
              log=$(ls logs/*$build*.log)
              status=$(grep '\[kgd-build-status\]' $log | cut -d ' ' -f 2)
            
              if [ $status -ne 0 ]
              then
                echo "#### $build" >> $errs_log
                grep -i -e '\berror\b' -e '\bfailed\b' -e '\bwarning\b' $log \
                | grep -v "##\[error\]Process completed" \
                | sed -e 's/##\[error\]//' -e 's/::error:://' | tr -d '\r' > tmp
                cat tmp >> $errs_log
                printf "\0" >> $errs_log
                
                n=1 # Windows logs contain a newline in the last error -> merge
                [[ $log == *win* ]] && n=$(($n + 1))
                error=$(tail -n $n tmp | tr -d '\n' | sed 's/$/\n/')
                
                permalink="$wurl$build"
                echo "| :x: | [$build]($permalink) | $error |" >> $errs_table
                
              else
                echo "| :heavy_check_mark: | $build |" >> $built_table
              fi
              
              prettybuild=$(sed -e 's/-/|/' \
                -e 's/\([cp]p\)\([0-9]\)/\1 \2./' -e 's/^cp/CPython/' \
                -e 's/^pp/PyPy/' -e 's/\(|[^_]*\)_\([^|]*\)/\1<br>(\2)/' \
                <<< "$build")
              echo "$build|$prettybuild|$status" >> $matrix_log
            done
            
            echo "# Build summary"
            
            #echo "## Raw matrix input"
            
            #cat $matrix_log
            
            #echo "## Matrix summary test"
            awk -F '|' -vurl=$wurl '
              {
                d[$2][$3]=$4; r[$2]=1; c[$3]=1; b[$2][$3]=$1;
              }END{
                PROCINFO["sorted_in"] = "@ind_str_asc";
                printf "| |";
                for (c_ in c) printf " %s |", c_;
                printf "\n| --- |";
                for (c_ in c) printf " %s |", ":---:";
                printf "\n";
                for (r_ in r) {
                  printf "| %s |", r_;
                  for (c_ in c) {
                    v = d[r_][c_];
                    if (v == 1)       v = "[:x:]("url"#"b[r_][c_]")";
                    else if (v == 0)  v = ":heavy_check_mark:";
                    else              v = ":black_circle:";
                    printf " %s |", v;
                  }
                  printf "\n";
                }
              }' $matrix_log | tee $matrix_summary
            echo

            echo "Successfully built $rate% of wheels"
            echo
            
            if [ -f $errs_log ]
            then
              echo "## Unsuccessful builds:"
              echo "|     | Build | Error |"
              echo "| :-: | :---- | ----- |"
              cat $errs_table  | sort -t '|' -k4,4
              echo
              echo "### Details:"
              cat $errs_log | sort -z -k2,2 | tr -d '\0'
              echo
            fi
            
          ) | tee -a $wiki_summary $GITHUB_STEP_SUMMARY
          
          # Generate synthetic badges
          for type in macosx manylinux musllinux win
          do
            echo "## $type ##"
          
            filenames="$filenames badge-wheel-$type"
            echo "filenames: $filenames"
            pretty_type=$(sed 's/win/windows/' <<< $type)
            labels="$labels $pretty_type"
            echo "   labels: $labels"
            
            all=$(grep "$type" $matrix_log | cut -d '|' -f4 | wc -l)
            passed=$(grep "$type.*0$" $matrix_log | cut -d '|' -f4 | wc -l)
            msg="$passed/$all"
            echo "stats: $msg"
            color=$(echo "$passed $all" | awk '{
              print ($1==$2 ? "success" : ($1 > 0 ? "important" : "critical"))
            }')
            
            messages="$messages $msg"
            echo " messages: $messages"
            colors="$colors $color"
            echo "   colors: $colors"
            
          done
          
          echo "BADGES_FILENAMES=($filenames )" >> $GITHUB_ENV
          echo "BADGES_LABELS=($labels )" >> $GITHUB_ENV
          echo "BADGES_MESSAGES=($messages )" >> $GITHUB_ENV
          echo "BADGES_COLORS=($colors )" >> $GITHUB_ENV
          
          ls saucisson
          wc -l saucisson/*
          
          
      - name: Generate html summary
        uses: jaywcjlove/markdown-to-html-cli@main
        with:
          source: saucisson/matrix.md
          output: saucisson/matrix.html
          github-corners: https://github.com/jaywcjlove/markdown-to-html-cli

      - name: Upload summary to Wiki
        uses: SwiftDocOrg/github-wiki-publish-action@v1
        with:
          path: "saucisson"
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

      - name: Build Badges
        uses: peterrhodesdev/build-a-badge@v1.3.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filename: ${{ env.BADGES_FILENAMES }}
          label: ${{ env.BADGES_LABELS }}
          message: ${{ env.BADGES_MESSAGES }}
          color: ${{ env.BADGES_COLORS }}
                    
    # For testing purposes, upload always
    #if: always()
    ## upload to PyPI on every tag starting with 'v'
    #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        name: upload to PyPI
        if: ${{ ! always() }}
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          repository_url: https://test.pypi.org/legacy/
          # To test: repository_url: https://test.pypi.org/legacy/
