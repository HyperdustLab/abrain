name: Build, test, upload (PyPI)

# Build on every branch push, tag push, and pull request change:
on:
  push:
    branches:
      - main
  pull_request:
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
# on:
#   push:
#   pull_request:
#   release:
#     types:
#       - published
  workflow_dispatch:

jobs:
  collect_targets:
    name: Collecting build targets
    runs-on: ubuntu-latest
    steps:
    - name: Generating json string
      run: |
        mjson="{\"include\":["
        for os in linux macos windows
        do
          for bt in $(pipx cibuildwheel --platform $os --print-build-identifiers)
          do
            mjson="$mjson {\"os\": \"$os-latest\", \"build\": \"$bt\"},"
          done
        done
        mjson="$mjson]}"
        msjon=$(sed 's/,]/]/' <<< $mjson)
        echo $mjson
        echo "MATRIX_JSON=$mjson" >> $GITHUB_ENV
  build_wheels:
    needs: collect_targets
    name: Build ${{ matrix.build }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(env.MATRIX_JSON) }}

    steps:
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.4
        env:
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_TEST_EXTRAS: tests
          CIBW_BEFORE_TEST_LINUX: "yum install -y graphviz"
          CIBW_BEFORE_TEST_MACOS: "brew install graphviz"
          CIBW_BEFORE_TEST_WINDOWS: "choco install graphviz"
          CIBW_TEST_COMMAND: |
            pytest {project}/tests -ra --small-scale --test-evolution -v

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # For testing purposes, upload always
    #if: always()
    ## upload to PyPI on every tag starting with 'v'
    #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          repository_url: https://test.pypi.org/legacy/
          # To test: repository_url: https://test.pypi.org/legacy/
