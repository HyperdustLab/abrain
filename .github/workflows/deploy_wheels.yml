name: Build, test, upload (PyPI)

# Build on every branch push, tag push, and pull request change:
on:
  push:
    branches:
      - main
  pull_request:
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
# on:
#   push:
#   pull_request:
#   release:
#     types:
#       - published
  workflow_dispatch:

jobs:
  collect_targets:
    name: Collecting build targets
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-mjson.outputs.matrix }}
    steps:
    - uses: actions/checkout@v3
    - name: Generating json string
      id: gen-mjson
      run: |
        mjson="{\"include\":["
        for os in linux macos windows
        do
          github_os=$os
          [ "$os" == "linux" ] && github_os="ubuntu" 
          for bt in $(pipx run cibuildwheel --platform $os --print-build-identifiers)
          do
            mjson="$mjson {\"os\": \"$github_os\", \"build\": \"$bt\"},"
          done
        done
        mjson="$mjson]}"
        mjson=$(sed 's/,]/]/' <<< $mjson)
        echo $mjson | jq .
        echo "matrix=$mjson" >> $GITHUB_OUTPUT
        
  build_wheels:
    needs: collect_targets
    name: Build ${{ matrix.build }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.collect_targets.outputs.matrix) }}

    steps:
      - name: Faking build wheels
        shell: bash
        run: |
          echo "Building ${{ matrix.build }}"
          mkdir wheelhouse
          mkdir logs
          echo "import random" > script.py
          echo "fail = (random.random() < .5)" >> script.py
          echo "if not fail:" >> script.py
          echo "  open('wheelhouse/${{ matrix.build }}.whl', 'w')" >> script.py
          echo "  print('Success')" >> script.py
          echo "else:" >> script.py
          echo "  msg=random.choice(['squares are round', 'err1', 'foo', 'bar'])" >> script.py
          echo "  print('Simulated error', msg)" >> script.py
          echo "  print('##[error]Process completed with exit code 1')" >> script.py
          echo "exit(fail)" >> script.py
          python3 script.py 2>&1 | tee logs/${{ matrix.build }}.log
          exit ${PIPESTATUS[0]}
                    
      #- uses: actions/checkout@v3

      #- name: Build wheels
        #env:
          #CIBW_BUILD: ${{ matrix.build }}
          #CIBW_BUILD_VERBOSITY: -v
          #CIBW_TEST_EXTRAS: tests
          #CIBW_BEFORE_TEST: "pip install kaleido || echo 'No install candidates for kaleido'"
          #CIBW_BEFORE_TEST_LINUX: "yum install -y graphviz || apk add graphviz"
          #CIBW_BEFORE_TEST_MACOS: "brew install graphviz"
          #CIBW_BEFORE_TEST_WINDOWS: "choco install graphviz --no-progress"
          #CIBW_TEST_COMMAND: |
            #pytest {project}/tests -ra --small-scale --test-evolution
        #shell: bash
        #run: |
          #mkdir logs
          #pipx run cibuildwheel 2>&1 | tee logs/${{ matrix.build }}.log
          #exit ${PIPESTATUS[0]}
          
      # --------
      # Unable to use github logs or redirect. Abandonned in favor of manual invocation
      #- name: Build wheels
        #uses: pypa/cibuildwheel@v2.11.4
        #env:
          #CIBW_BUILD: ${{ matrix.build }}
          #CIBW_TEST_EXTRAS: tests
          #CIBW_BEFORE_TEST_LINUX: "yum install -y graphviz || apt install -y graphviz"
          #CIBW_BEFORE_TEST_MACOS: "brew install graphviz"
          #CIBW_BEFORE_TEST_WINDOWS: "choco install graphviz"
          #CIBW_TEST_COMMAND: |
            #pytest {project}/tests -ra --small-scale --test-evolution
      # --------

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./wheelhouse/*.whl
      - uses: actions/upload-artifact@v3
        if: ${{ always() && !cancelled() }}
        with:
          name: logs
          path: ./logs/*.log

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: |
          mkdir logs
          pipx run build --sdist 2>&1 | tee logs/sdist.log
          exit ${PIPESTATUS[0]}

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/*.tar.gz
      - uses: actions/upload-artifact@v3
        if: ${{ always() && !cancelled() }}
        with:
          name: logs
          path: ./logs/*.log

  post_build:
    needs: [collect_targets, build_wheels, build_sdist]
    name: Post-build processing
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() }}
    steps:
      - uses: actions/download-artifact@v3
        name: download sdist/wheels
        with:
          name: dist
          path: dist
          
      - uses: actions/download-artifact@v3
        name: download logs
        with:
          name: logs
          path: logs
          
      - name: Generate summary
        env:
          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "Generating summary"
          ls dist/* logs/*
          
          mjson='${{ needs.collect_targets.outputs.matrix }}'
          builds=$(echo $mjson | jq -r '.include[].build')
          builds_n=$(wc -l <<< $builds)
          found=$(ls dist/*.whl | wc -l)
          echo "Built $found / $builds_n"
          rate=$(echo "$found $builds_n" | awk '{printf "%.0f", 100*$1/$2}')
          
          mkdir wiki
          wiki="wiki/wheels.md"
                    
          err_log=errors.md
          echo > $err_log

          (
            echo "# Build summary"
            echo "Successfully built $rate% of wheels"
            echo "## Details:"
            echo "| ID  | Ok  | Build | Error |"
            echo "| :-: | :-: | :---- | ----- |"
            for build in $builds
            do
              mark=":heavy_check_mark:" 
              error=" "
              
              # If wheel file was not uploaded -> error
              # x86 final name is different from built type
              build_search=$(sed 's/x86/*x86/' <<< $build)
              echo find dist -name "*$build_search*.whl" >&2
              wheel=$(find dist -name "*$build_search*.whl")
              echo ">> $wheel" >&2
              if [ ! -z $wheel ]
              then
                mark=":x:"
                
                # Look it up in the logs
                echo "## $build" >> err_log
                grep -i -e '\berror\b' -e '\bfailed\b' logs/*$build*.log \
                | grep -v "##\[error\]Process completed" | tr -d '\r' > tmp
                cat tmp >> err_log
                error=$(tail -n 1 tmp)
                
                build="[$build](#$build)"
              fi
              echo "| $mark | $build | $error |"
            done | sort -t '|' -k4,4 | nl -s '|'
            cat err_log
          ) | tee -a $wiki $GITHUB_STEP_SUMMARY
      
      - name: Upload summary to Wiki
        uses: SwiftDocOrg/github-wiki-publish-action@v1
        with:
          path: "wiki"
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          
    # For testing purposes, upload always
    #if: always()
    ## upload to PyPI on every tag starting with 'v'
    #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        name: upload to PyPI
        if: ${{ ! always() }}
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          repository_url: https://test.pypi.org/legacy/
          # To test: repository_url: https://test.pypi.org/legacy/
