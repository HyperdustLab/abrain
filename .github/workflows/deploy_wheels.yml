name: Build, test, upload (PyPI)

# Build on every branch push, tag push, and pull request change:
on:
  push:
    branches:
      - main
  pull_request:
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
# on:
#   push:
#   pull_request:
#   release:
#     types:
#       - published
  workflow_dispatch:

jobs:
  collect_targets:
    name: Collecting build targets
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-mjson.outputs.matrix }}
    steps:
    - uses: actions/checkout@v3
    - name: Generating json string
      id: gen-mjson
      run: |
        mjson="{\"include\":["
        for os in linux macos windows
        do
          github_os=$os
          [ "$os" == "linux" ] && github_os="ubuntu" 
          for bt in $(pipx run cibuildwheel --platform $os --print-build-identifiers)
          do
            mjson="$mjson {\"os\": \"$github_os\", \"build\": \"$bt\"},"
          done
        done
        mjson="$mjson]}"
        mjson=$(sed 's/,]/]/' <<< $mjson)
        echo $mjson | jq .
        echo "matrix=$mjson" >> $GITHUB_OUTPUT
        
  build_wheels:
    needs: collect_targets
    name: Build ${{ matrix.build }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.collect_targets.outputs.matrix) }}

    steps:
      #- name: Faking build wheels
        #run: |
          #echo "Building ${{ matrix.build }}"
          #mkdir wheelhouse
          #python -c "import random; exit(random.random() < .5)" && touch "wheelhouse/${{ matrix.build }}.whl"
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.4
        env:
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_TEST_EXTRAS: tests
          CIBW_BEFORE_TEST_LINUX: "yum install -y graphviz || apt install -y graphviz"
          CIBW_BEFORE_TEST_MACOS: "brew install graphviz"
          CIBW_BEFORE_TEST_WINDOWS: "choco install graphviz"
          CIBW_TEST_COMMAND: |
            pytest {project}/tests -ra --small-scale --test-evolution

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  post_build:
    needs: [collect_targets, build_wheels, build_sdist]
    name: Post-build processing
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() }}
    steps:
      - uses: actions/download-artifact@v3
        name: download sdist/wheels
        with:
          name: artifact
          path: dist
          
      - name: Generate summary
        run: |
          mjson='${{ needs.collect_targets.outputs.matrix }}'
          builds=$(echo $mjson | jq -r '.include[].build')
          builds_n=$(wc -l <<< $builds)
          found=$(ls dist/*.whl | wc -l)
          echo "Built $found / $builds_n"
          rate=$(echo "$found $builds_n" | awk '{printf "%.0f", 100*$1/$2}')
          
          mkdir wiki
          wiki="wiki/wheels.md"
          
          for outfile in $wiki $GITHUB_STEP_SUMMARY
          do
            echo "# Build summary" >> $outfile
            echo "Successfully $rate% of wheels" >> $outfile
            echo "## Details:" >> $outfile
            echo "| Status | Build |" >> $outfile
            echo "| :----: | :---- |" >> $outfile
            for build in $builds
            do
              ls dist/*$build*.whl && mark=":heavy_check_mark:" || mark=":x:"
              echo "| $mark | $build |" >> $outfile
            done
          done
      
      - name: Upload summary to Wiki
        uses: SwiftDocOrg/github-wiki-publish-action@v1
        with:
          path: "wiki"
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          
    # For testing purposes, upload always
    #if: always()
    ## upload to PyPI on every tag starting with 'v'
    #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        name: upload to PyPI
        if: ${{ ! always() }}
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          repository_url: https://test.pypi.org/legacy/
          # To test: repository_url: https://test.pypi.org/legacy/
