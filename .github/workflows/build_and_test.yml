# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build and test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install pip
      run: |
        python -m pip install --upgrade pip
    - name: Install with test dependencies
      run: |
        sudo apt install -y lcov graphviz
        # Request debug build with c++ coverage
        TEST=1 python -m pip install .[tests] --no-clean -v
    - name: Set variables
      run: |
        test_out=tests-results
        echo "TEST_OUT=$test_out" >> $GITHUB_ENV
        cov_out=$test_out/coverage/
        echo "COV_OUT=$cov_out" >> $GITHUB_ENV
        pycoverage=$cov_out/py.coverage.info
        echo "PYCOVERAGE=$pycoverage" >> $GITHUB_ENV
        cppcoverage=$cov_out/cpp.coverage.info
        echo "CPPCOVERAGE=$cppcoverage" >> $GITHUB_ENV
        # Everything failed unless otherwise specified
        echo "OUTPUT_TESTS=1" >> $GITHUB_ENV
        echo "OUTPUT_TCOV=N/A" >> $GITHUB_ENV
        echo "OUTPUT_PCOV=N/A" >> $GITHUB_ENV
        echo "OUTPUT_CCOV=N/A" >> $GITHUB_ENV
        
        # Generate version badge
        version=$(grep 'version =' | cut -d ' ' -f 3 | tr -d '"')
        echo "Extracted version: '$version'"
        read lbl color <<< $(echo $arg | awk '
          /a/{ print "alpha", 25; next }
          /b/{ print "beta", 25; next }
          /rc/{ print "pre-release", 50; next }
          /^[0-9.]*$/{ print "final", 66; next }
          /post/{ print "post-release", 50; next }
        )'
        
        echo "LBL_VERSION=$lbl" >> $GITHUB_ENV
        echo "MSG_VERSION=$version" >> $GITHUB_ENV
        echo "COLOR_VERSION=$color" >> $GITHUB_ENV

        echo "
    - name: Lint with flake8
      id: flake
      continue-on-error: true
      run: |
        # Ensure PEP8 compliance
        echo "OUTPUT_FLAKE=$(flake8 . --count -qq)" >> $GITHUB_ENV
        flake8 . --count --statistics --show-source
    - name: Test with pytest/coverage
      run: |
        lcov --zerocounters --directory .
        
        coverage run --branch --data-file=$(basename $PYCOVERAGE) \
          --source=. --omit="tests/conftest.py,setup.py" \
          -m \
          pytest --durations=10 --basetemp=$TEST_OUT -ra \
            --normal-scale --test-evolution
        echo "OUTPUT_TESTS=0" >> $GITHUB_ENV
    - name: Compute python coverage
      continue-on-error: true
      run: |
        mkdir -p $COV_OUT
        mv $(basename $PYCOVERAGE) $PYCOVERAGE
        pcov=$(coverage report --data-file=$PYCOVERAGE \
        | tail -n 1 | awk '{print $NF }' | tr -d "%")
        echo "OUTPUT_PCOV=$pcov.0" >> $GITHUB_ENV
        coverage html --data-file=$PYCOVERAGE -d $COV_OUT/html/python
        coverage report --data-file=$PYCOVERAGE --fail-under=100
    - name: Compute c++ coverage
      continue-on-error: true
      run: |
        lcov --capture --no-external --directory . --output-file=$CPPCOVERAGE
        lcov --remove $CPPCOVERAGE '*_bindings*' -o $CPPCOVERAGE
        ccov=$(lcov --summary $CPPCOVERAGE | grep 'lines' | sed 's/.*: \(.*\)%.*/\1/')
        echo "OUTPUT_CCOV=$ccov" >> $GITHUB_ENV
        lcov --list $CPPCOVERAGE
        genhtml -q --demangle-cpp -o $COV_OUT/html/cpp $CPPCOVERAGE
    - name: Archive test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-results-artifact
        path: tests-results
        retention-days: 2
    - name: Prepare Badges variables
      run: |
        setenv(){
          if [ $1 ]; then v=$3; else v=$4; fi;
          echo "$2=$v" >> $GITHUB_ENV
        }
        setenv '${{ env.OUTPUT_FLAKE }} -eq 0' \
          MSG_FLAKE Compliant "${{ env.OUTPUT_FLAKE }} errors"
        echo "COLOR_FLAKE=$(( ${{ env.OUTPUT_FLAKE }} > 0 ? 0 : 120))" >> $GITHUB_ENV
        setenv '${{ env.OUTPUT_TESTS }} -eq 0' MSG_TESTS passing failed
        echo "COLOR_TESTS=$(( ${{ env.OUTPUT_TESTS }} > 0 ? 0 : 120))" >> $GITHUB_ENV
        
        pcov=${{ env.OUTPUT_PCOV }}; ccov=${{ env.OUTPUT_CCOV }};
        tcov="N/A"
        [ $pcov != "N/A" -a $ccov != "N/A" ] && tcov=$(echo ".5 * ($pcov + $ccov)" | bc)
        echo "OUTPUT_TCOV=$tcov" >> $GITHUB_ENV
        covcolor(){
          case $2 in   "N/A") c="0";;
                     "100.0") c="120";;
                           *) c=$(echo "scale=0; $2 * .6 / 1" | bc);;
          esac;
          echo "COLOR_$1=$c" >> $GITHUB_ENV
        }
        covcolor TCOV $tcov
        covcolor PCOV $pcov
        covcolor CCOV $ccov
        covmsg(){
          c=$2
          [ $2 != "N/A" ] && c=$(printf "%g%%" "$c")
          echo "MSG_$1=$c" >> $GITHUB_ENV
        }
        covmsg TCOV $tcov
        covmsg PCOV $pcov
        covmsg CCOV $ccov
        
    - name: Build Badges
      if: always() && !cancelled()
      uses: peterrhodesdev/build-a-badge@v1.3.1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        filename: ("badge-version" "badge-flake" "badge-tests" "badge-cov" "badge-pcov" "badge-ccov")
        label: ("${{ env.LBL_VERSION }}" "PEP8" "tests" "code coverage" "" "")
        labelColor: ("" "" "" "555" "555")
        message: |
          (
            "${{ env.MSG_VERSION }}"
            "${{ env.MSG_FLAKE }}"
            "${{ env.MSG_TESTS }}"
            "${{ env.MSG_TCOV }}"
            "${{ env.MSG_PCOV }}"
            "${{ env.MSG_CCOV }}"
          )
        color: |
          (
            'hsl(240, 100%, '${{ env.COLOR_VERSION }}'%)'
            'hsl('${{ env.COLOR_FLAKE }}', 100%, 25%)'
            'hsl('${{ env.COLOR_TESTS }}', 100%, 25%)'
            'hsl('${{ env.COLOR_TCOV }}', 100%, 25%)'
            'hsl('${{ env.COLOR_PCOV }}', 100%, 25%)'
            'hsl('${{ env.COLOR_CCOV }}', 100%, 25%)'
          )
        namedLogo: ("" "" "" "python" "c++")
